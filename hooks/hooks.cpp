// This is an independent project of an individual developer. Dear PVS-Studio, please check it.
// PVS-Studio Static Code Analyzer for C, C++, C#, and Java: http://www.viva64.com

#include "hooks.hpp"

#include <tchar.h>
#include <iostream>
#include <d3d9.h>
#include <dinput.h>

#include "..\cheats\misc\logs.h"
#include "..\cheats\misc\misc.h"
#include "..\cheats\visuals\other_esp.h"
#include "..\cheats\visuals\radar.h"
#include "../ImGui/imgui_freetype.h"

#pragma comment (lib, "d3d9.lib")
#pragma comment (lib, "d3dx9.lib")
#pragma comment(lib, "freetype.lib")

#include <shlobj.h>
#include <shlwapi.h>
#include <thread>
#include "..\cheats\menu.h"
#include "../Bytesa.h"

auto _visible = true;
static auto d3d_init = false;

namespace INIT
{
	HMODULE Dll;
	HWND Window;
	WNDPROC OldWindow;
}

BYTE logokitsune[33570] =
{
	0x00, 0x01, 0x00, 0x00, 0x00, 0x0E, 0x00, 0x80, 0x00, 0x03, 0x00, 0x60,
	0x44, 0x53, 0x49, 0x47, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x07, 0x6C,
	0x00, 0x00, 0x00, 0x08, 0x4F, 0x53, 0x2F, 0x32, 0x58, 0x39, 0x58, 0xCB,
	0x00, 0x00, 0x01, 0x68, 0x00, 0x00, 0x00, 0x60, 0x63, 0x6D, 0x61, 0x70,
	0x0C, 0x9A, 0x08, 0x40, 0x00, 0x00, 0x01, 0xE4, 0x00, 0x00, 0x01, 0x6A,
	0x63, 0x76, 0x74, 0x20, 0x00, 0x21, 0x02, 0x79, 0x00, 0x00, 0x03, 0x58,
	0x00, 0x00, 0x00, 0x04, 0x67, 0x61, 0x73, 0x70, 0x00, 0x00, 0x00, 0x10,
	0x00, 0x00, 0x07, 0x64, 0x00, 0x00, 0x00, 0x08, 0x67, 0x6C, 0x79, 0x66,
	0x84, 0x71, 0x68, 0x47, 0x00, 0x00, 0x03, 0x6C, 0x00, 0x00, 0x01, 0x80,
	0x68, 0x65, 0x61, 0x64, 0x23, 0x6C, 0x3E, 0xF6, 0x00, 0x00, 0x00, 0xEC,
	0x00, 0x00, 0x00, 0x36, 0x68, 0x68, 0x65, 0x61, 0x08, 0xF1, 0x04, 0xFF,
	0x00, 0x00, 0x01, 0x24, 0x00, 0x00, 0x00, 0x24, 0x68, 0x6D, 0x74, 0x78,
	0x18, 0x1E, 0x00, 0xBA, 0x00, 0x00, 0x01, 0xC8, 0x00, 0x00, 0x00, 0x1C,
	0x6C, 0x6F, 0x63, 0x61, 0x00, 0xE8, 0x00, 0xFC, 0x00, 0x00, 0x03, 0x5C,
	0x00, 0x00, 0x00, 0x10, 0x6D, 0x61, 0x78, 0x70, 0x00, 0x4F, 0x00, 0x7C,
	0x00, 0x00, 0x01, 0x48, 0x00, 0x00, 0x00, 0x20, 0x6E, 0x61, 0x6D, 0x65,
	0x4B, 0xEE, 0x17, 0x2F, 0x00, 0x00, 0x04, 0xEC, 0x00, 0x00, 0x02, 0x3D,
	0x70, 0x6F, 0x73, 0x74, 0x71, 0xC3, 0xC6, 0xAE, 0x00, 0x00, 0x07, 0x2C,
	0x00, 0x00, 0x00, 0x38, 0x70, 0x72, 0x65, 0x70, 0x68, 0x06, 0x8C, 0x85,
	0x00, 0x00, 0x03, 0x50, 0x00, 0x00, 0x00, 0x07, 0x00, 0x01, 0x00, 0x00,
	0x00, 0x01, 0x00, 0x00, 0x7C, 0x55, 0xE6, 0x96, 0x5F, 0x0F, 0x3C, 0xF5,
	0x00, 0x0B, 0x03, 0xE8, 0x00, 0x00, 0x00, 0x00, 0xDF, 0x7F, 0xFD, 0xBB,
	0x00, 0x00, 0x00, 0x00, 0xDF, 0x7F, 0xFD, 0xBB, 0x00, 0x21, 0xFF, 0x32,
	0x05, 0x2C, 0x03, 0x69, 0x00, 0x00, 0x00, 0x08, 0x00, 0x02, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x03, 0x69, 0xFF, 0x32,
	0x00, 0x5A, 0x05, 0xC5, 0x00, 0x00, 0x00, 0x00, 0x05, 0x2C, 0x00, 0x01,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x07, 0x00, 0x01, 0x00, 0x00, 0x00, 0x07, 0x00, 0x79,
	0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x01,
	0x00, 0x01, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x04, 0x04, 0x47, 0x01, 0x90, 0x00, 0x05, 0x00, 0x00, 0x02, 0x8A,
	0x02, 0xBC, 0x00, 0x00, 0x00, 0x8C, 0x02, 0x8A, 0x02, 0xBC, 0x00, 0x00,
	0x01, 0xE0, 0x00, 0x31, 0x01, 0x02, 0x00, 0x00, 0x02, 0x00, 0x05, 0x03,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x4C,
	0x47, 0x52, 0x00, 0x40, 0x00, 0x00, 0x00, 0xA0, 0x03, 0x20, 0xFF, 0x38,
	0x00, 0x5A, 0x03, 0x69, 0x00, 0xCE, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
	0x00, 0x00, 0x03, 0x69, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x01,
	0x01, 0x6C, 0x00, 0x21, 0x03, 0xE8, 0x00, 0x00, 0x01, 0x4D, 0x00, 0x00,
	0x03, 0xE8, 0x00, 0x00, 0x03, 0xE8, 0x00, 0x00, 0x05, 0xC5, 0x00, 0x99,
	0x03, 0xE8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x03,
	0x00, 0x00, 0x00, 0x1C, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x64,
	0x00, 0x03, 0x00, 0x01, 0x00, 0x00, 0x00, 0x1C, 0x00, 0x04, 0x00, 0x48,
	0x00, 0x00, 0x00, 0x0E, 0x00, 0x08, 0x00, 0x02, 0x00, 0x06, 0x00, 0x00,
	0x00, 0x0D, 0x00, 0x20, 0x00, 0x5A, 0x00, 0x7A, 0x00, 0xA0, 0xFF, 0xFF,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x20, 0x00, 0x5A, 0x00, 0x7A,
	0x00, 0xA0, 0xFF, 0xFF, 0x00, 0x01, 0xFF, 0xF6, 0xFF, 0xE4, 0xFF, 0xAB,
	0xFF, 0x8B, 0xFF, 0x66, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x06,
	0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02,
	0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x04, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xB8, 0x01, 0xFF, 0x85,
	0xB0, 0x04, 0x8D, 0x00, 0x00, 0x21, 0x02, 0x79, 0x00, 0x00, 0x00, 0x14,
	0x00, 0x14, 0x00, 0x14, 0x00, 0x14, 0x00, 0x14, 0x00, 0xC0, 0x00, 0xC0,
	0x00, 0x02, 0x00, 0x21, 0x00, 0x00, 0x01, 0x2A, 0x02, 0x9A, 0x00, 0x03,
	0x00, 0x07, 0x00, 0x00, 0x33, 0x11, 0x21, 0x11, 0x27, 0x33, 0x11, 0x23,
	0x21, 0x01, 0x09, 0xE8, 0xC7, 0xC7, 0x02, 0x9A, 0xFD, 0x66, 0x21, 0x02,
	0x58, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x99, 0xFF, 0x32, 0x05, 0x2C,
	0x03, 0x69, 0x00, 0x0F, 0x00, 0x18, 0x00, 0x30, 0x00, 0x48, 0x00, 0x60,
	0x00, 0x78, 0x00, 0x00, 0x01, 0x36, 0x33, 0x32, 0x16, 0x17, 0x16, 0x15,
	0x14, 0x06, 0x0F, 0x01, 0x26, 0x01, 0x37, 0x36, 0x07, 0x34, 0x33, 0x32,
	0x00, 0x07, 0x23, 0x22, 0x00, 0x17, 0x36, 0x33, 0x32, 0x15, 0x14, 0x06,
	0x07, 0x0E, 0x01, 0x15, 0x14, 0x06, 0x07, 0x06, 0x23, 0x22, 0x35, 0x34,
	0x36, 0x3F, 0x02, 0x36, 0x17, 0x36, 0x33, 0x32, 0x15, 0x14, 0x06, 0x07,
	0x0E, 0x01, 0x15, 0x14, 0x06, 0x07, 0x06, 0x23, 0x22, 0x35, 0x34, 0x36,
	0x3F, 0x02, 0x36, 0x17, 0x36, 0x33, 0x32, 0x15, 0x14, 0x06, 0x07, 0x0E,
	0x01, 0x15, 0x14, 0x06, 0x07, 0x06, 0x23, 0x22, 0x35, 0x34, 0x36, 0x3F,
	0x02, 0x36, 0x17, 0x36, 0x33, 0x32, 0x15, 0x14, 0x06, 0x07, 0x0E, 0x01,
	0x15, 0x14, 0x06, 0x07, 0x06, 0x23, 0x22, 0x35, 0x34, 0x36, 0x3F, 0x02,
	0x36, 0x02, 0xAB, 0x4E, 0x51, 0x90, 0xF9, 0x35, 0x24, 0x47, 0x29, 0x29,
	0xE3, 0xFE, 0x38, 0x3B, 0x31, 0x9F, 0x0E, 0x13, 0x02, 0xA8, 0x09, 0x01,
	0x13, 0xFD, 0x54, 0x19, 0x2E, 0x1D, 0x2A, 0x1E, 0x27, 0x38, 0x23, 0x2E,
	0x39, 0x42, 0x29, 0x38, 0x27, 0x37, 0x5C, 0x0B, 0x12, 0xC8, 0x2F, 0x1D,
	0x29, 0x1E, 0x27, 0x38, 0x22, 0x2E, 0x39, 0x42, 0x29, 0x39, 0x27, 0x37,
	0x5D, 0x0A, 0x12, 0xC9, 0x2F, 0x1D, 0x29, 0x1E, 0x27, 0x38, 0x23, 0x2E,
	0x39, 0x42, 0x29, 0x38, 0x27, 0x37, 0x5C, 0x0B, 0x12, 0xC8, 0x2E, 0x1D,
	0x2A, 0x1E, 0x27, 0x38, 0x23, 0x2D, 0x39, 0x42, 0x29, 0x39, 0x27, 0x37,
	0x5D, 0x0A, 0x12, 0x03, 0x4B, 0x1E, 0xAA, 0x8B, 0x5F, 0x47, 0x3E, 0xC3,
	0x31, 0x31, 0xE5, 0x01, 0xC8, 0x2A, 0x25, 0x7A, 0x0E, 0xFD, 0x4A, 0x0A,
	0x02, 0x9F, 0xAE, 0x0A, 0x20, 0x12, 0x13, 0x07, 0x08, 0x31, 0x47, 0x43,
	0x42, 0x10, 0x12, 0x20, 0x13, 0x14, 0x0B, 0x10, 0x5E, 0x97, 0x59, 0x0A,
	0x1F, 0x12, 0x13, 0x07, 0x08, 0x31, 0x47, 0x43, 0x42, 0x10, 0x12, 0x20,
	0x13, 0x14, 0x0B, 0x10, 0x5E, 0x96, 0x6A, 0x0A, 0x1F, 0x13, 0x13, 0x07,
	0x08, 0x31, 0x46, 0x43, 0x42, 0x10, 0x12, 0x20, 0x13, 0x13, 0x0B, 0x10,
	0x5E, 0x97, 0x58, 0x0A, 0x20, 0x12, 0x13, 0x07, 0x08, 0x31, 0x47, 0x43,
	0x42, 0x10, 0x12, 0x20, 0x13, 0x14, 0x0B, 0x10, 0x5E, 0x97, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x10, 0x00, 0xC6, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x01, 0x00, 0x06, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x02, 0x00, 0x07, 0x00, 0x06, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x03, 0x00, 0x29, 0x00, 0x0D, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x04, 0x00, 0x0E, 0x00, 0x36, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x05, 0x00, 0x0F, 0x00, 0x44, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x06, 0x00, 0x0E, 0x00, 0x53, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x0A, 0x00, 0x1C, 0x00, 0x61, 0x00, 0x03, 0x00, 0x01, 0x04, 0x09,
	0x00, 0x01, 0x00, 0x0C, 0x00, 0x7D, 0x00, 0x03, 0x00, 0x01, 0x04, 0x09,
	0x00, 0x02, 0x00, 0x0E, 0x00, 0x89, 0x00, 0x03, 0x00, 0x01, 0x04, 0x09,
	0x00, 0x03, 0x00, 0x52, 0x00, 0x97, 0x00, 0x03, 0x00, 0x01, 0x04, 0x09,
	0x00, 0x04, 0x00, 0x1C, 0x00, 0xE9, 0x00, 0x03, 0x00, 0x01, 0x04, 0x09,
	0x00, 0x05, 0x00, 0x1E, 0x01, 0x05, 0x00, 0x03, 0x00, 0x01, 0x04, 0x09,
	0x00, 0x06, 0x00, 0x1C, 0x01, 0x23, 0x00, 0x03, 0x00, 0x01, 0x04, 0x09,
	0x00, 0x0A, 0x00, 0x38, 0x01, 0x3F, 0x00, 0x03, 0x00, 0x01, 0x04, 0x09,
	0x00, 0x10, 0x00, 0x0C, 0x00, 0x7D, 0x00, 0x03, 0x00, 0x01, 0x04, 0x09,
	0x00, 0x11, 0x00, 0x0E, 0x00, 0x89, 0x4D, 0x79, 0x66, 0x6F, 0x6E, 0x74,
	0x52, 0x65, 0x67, 0x75, 0x6C, 0x61, 0x72, 0x43, 0x61, 0x6C, 0x6C, 0x69,
	0x67, 0x72, 0x61, 0x70, 0x68, 0x72, 0x20, 0x3A, 0x20, 0x4D, 0x79, 0x66,
	0x6F, 0x6E, 0x74, 0x20, 0x52, 0x65, 0x67, 0x75, 0x6C, 0x61, 0x72, 0x20,
	0x3A, 0x20, 0x32, 0x37, 0x2D, 0x31, 0x30, 0x2D, 0x32, 0x30, 0x32, 0x32,
	0x4D, 0x79, 0x66, 0x6F, 0x6E, 0x74, 0x20, 0x52, 0x65, 0x67, 0x75, 0x6C,
	0x61, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6F, 0x6E, 0x20, 0x30, 0x30,
	0x31, 0x2E, 0x30, 0x30, 0x33, 0x4D, 0x79, 0x66, 0x6F, 0x6E, 0x74, 0x2D,
	0x52, 0x65, 0x67, 0x75, 0x6C, 0x61, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x43, 0x61, 0x6C, 0x6C,
	0x69, 0x67, 0x72, 0x61, 0x70, 0x68, 0x72, 0x2E, 0x63, 0x6F, 0x6D, 0x00,
	0x4D, 0x00, 0x79, 0x00, 0x66, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x74, 0x00,
	0x52, 0x00, 0x65, 0x00, 0x67, 0x00, 0x75, 0x00, 0x6C, 0x00, 0x61, 0x00,
	0x72, 0x00, 0x43, 0x00, 0x61, 0x00, 0x6C, 0x00, 0x6C, 0x00, 0x69, 0x00,
	0x67, 0x00, 0x72, 0x00, 0x61, 0x00, 0x70, 0x00, 0x68, 0x00, 0x72, 0x00,
	0x20, 0x00, 0x3A, 0x00, 0x20, 0x00, 0x4D, 0x00, 0x79, 0x00, 0x66, 0x00,
	0x6F, 0x00, 0x6E, 0x00, 0x74, 0x00, 0x20, 0x00, 0x52, 0x00, 0x65, 0x00,
	0x67, 0x00, 0x75, 0x00, 0x6C, 0x00, 0x61, 0x00, 0x72, 0x00, 0x20, 0x00,
	0x3A, 0x00, 0x20, 0x00, 0x32, 0x00, 0x37, 0x00, 0x2D, 0x00, 0x31, 0x00,
	0x30, 0x00, 0x2D, 0x00, 0x32, 0x00, 0x30, 0x00, 0x32, 0x00, 0x32, 0x00,
	0x4D, 0x00, 0x79, 0x00, 0x66, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x74, 0x00,
	0x20, 0x00, 0x52, 0x00, 0x65, 0x00, 0x67, 0x00, 0x75, 0x00, 0x6C, 0x00,
	0x61, 0x00, 0x72, 0x00, 0x56, 0x00, 0x65, 0x00, 0x72, 0x00, 0x73, 0x00,
	0x69, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x20, 0x00, 0x30, 0x00, 0x30, 0x00,
	0x31, 0x00, 0x2E, 0x00, 0x30, 0x00, 0x30, 0x00, 0x33, 0x00, 0x4D, 0x00,
	0x79, 0x00, 0x66, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x74, 0x00, 0x2D, 0x00,
	0x52, 0x00, 0x65, 0x00, 0x67, 0x00, 0x75, 0x00, 0x6C, 0x00, 0x61, 0x00,
	0x72, 0x00, 0x43, 0x00, 0x72, 0x00, 0x65, 0x00, 0x61, 0x00, 0x74, 0x00,
	0x65, 0x00, 0x64, 0x00, 0x20, 0x00, 0x77, 0x00, 0x69, 0x00, 0x74, 0x00,
	0x68, 0x00, 0x20, 0x00, 0x43, 0x00, 0x61, 0x00, 0x6C, 0x00, 0x6C, 0x00,
	0x69, 0x00, 0x67, 0x00, 0x72, 0x00, 0x61, 0x00, 0x70, 0x00, 0x68, 0x00,
	0x72, 0x00, 0x2E, 0x00, 0x63, 0x00, 0x6F, 0x00, 0x6D, 0x00, 0x00, 0x00,
	0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xB5, 0x00, 0x32,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00,
	0x00, 0x01, 0x00, 0x02, 0x01, 0x02, 0x00, 0x03, 0x00, 0x5D, 0x01, 0x03,
	0x02, 0x43, 0x52, 0x04, 0x6E, 0x62, 0x73, 0x70, 0x00, 0x01, 0x00, 0x01,
	0xFF, 0xFF, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00
};

IDirect3DTexture9* logotype = nullptr;

extern IMGUI_IMPL_API LRESULT ImGui_ImplWin32_WndProcHandler(HWND hWnd, UINT msg, WPARAM wParam, LPARAM lParam);
extern IMGUI_IMPL_API LRESULT ImGui_ImplDX9_WndProcHandler(HWND hWnd, UINT msg, WPARAM wParam, LPARAM lParam);

namespace hooks
{
	int rage_weapon = 0;
	int legit_weapon = 0;
	bool menu_open = false;
	bool input_shouldListen = false;

	ButtonCode_t* input_receivedKeyval;

	LRESULT __stdcall Hooked_WndProc(HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam)
	{
		static auto is_down = true;
		static auto is_clicked = false;

		if (GetAsyncKeyState(VK_INSERT))
		{
			is_clicked = false;
			is_down = true;
		}
		else if (!GetAsyncKeyState(VK_INSERT) && is_down)
		{
			is_clicked = true;
			is_down = false;
		}
		else
		{
			is_clicked = false;
			is_down = false;
		}

		if (is_clicked)
		{
			menu_open = !menu_open;

			if (menu_open && g_ctx.available())
			{
				if (g_ctx.globals.current_weapon != -1)
				{
					if (g_cfg.ragebot.enable)
						rage_weapon = g_ctx.globals.current_weapon;
					else if (g_cfg.legitbot.enabled)
						legit_weapon = g_ctx.globals.current_weapon;
				}
			}
		}

		auto pressed_buttons = false;
		auto pressed_menu_key = uMsg == WM_LBUTTONDOWN || uMsg == WM_LBUTTONUP || uMsg == WM_RBUTTONDOWN || uMsg == WM_RBUTTONUP || uMsg == WM_MOUSEWHEEL;

		if (g_ctx.local()->is_alive() && !pressed_menu_key && !g_ctx.globals.focused_on_input)
			pressed_buttons = true;

		if (!pressed_buttons && d3d_init && menu_open && ImGui_ImplDX9_WndProcHandler(hWnd, uMsg, wParam, lParam) && !input_shouldListen)
			return true;

		if (menu_open && (uMsg == WM_LBUTTONDOWN || uMsg == WM_LBUTTONUP || uMsg == WM_MOUSEMOVE) && !input_shouldListen)
			return false;

		return CallWindowProc(INIT::OldWindow, hWnd, uMsg, wParam, lParam);
	}

	long __stdcall Hooked_EndScene(IDirect3DDevice9* pDevice)
	{
		static auto original_fn = directx_hook->get_func_address <EndSceneFn> (42);
		return original_fn(pDevice);
	}

	void GUI_Init(IDirect3DDevice9* pDevice)
	{
		ImGui::CreateContext();

		if (logotype == nullptr) D3DXCreateTextureFromFileInMemoryEx(pDevice, &logokitsune, sizeof(logokitsune), 65, 60, D3DX_DEFAULT, D3DUSAGE_DYNAMIC, D3DFMT_UNKNOWN, D3DPOOL_DEFAULT, D3DX_DEFAULT, D3DX_DEFAULT, 0, NULL, NULL, &logotype);

		ImGui_ImplWin32_Init(INIT::Window);
		ImGui_ImplDX9_Init(pDevice);

		auto& io = ImGui::GetIO();
		auto& style = ImGui::GetStyle();

		style.WindowMinSize = ImVec2(10, 10);
		ImFontConfig m_config;
		m_config.OversampleH = m_config.OversampleV = 3;
		m_config.PixelSnapH = false;

		static const ImWchar ranges[] =
		{
			0x0020, 0x00FF,
			0x0400, 0x044F,
			0
		};

		char windows_directory[MAX_PATH];
		GetWindowsDirectory(windows_directory, MAX_PATH);

		auto verdana_directory = (std::string)windows_directory + "\\Fonts\\Verdana.ttf";

		// Menu fonts
		c_menu::get().medium = io.Fonts->AddFontFromMemoryTTF((void*)PTRootUIMedium, sizeof(PTRootUIMedium), 15.0f, &m_config, ranges);
		c_menu::get().bold = io.Fonts->AddFontFromMemoryTTF((void*)PTRootUIBold, sizeof(PTRootUIBold), 15.0f, &m_config, ranges);
		c_menu::get().tab_icons = io.Fonts->AddFontFromMemoryTTF((void*)clarityfont, sizeof(clarityfont), 15.0f, &m_config, ranges);
		c_menu::get().logo = io.Fonts->AddFontFromMemoryTTF((void*)logokitsune, sizeof(logokitsune), 21.0f, &m_config, ranges);
		c_menu::get().tab_title = io.Fonts->AddFontFromMemoryTTF((void*)PTRootUIBold, sizeof(PTRootUIBold), 19.0f, &m_config, ranges);
		c_menu::get().tab_title_icon = io.Fonts->AddFontFromMemoryTTF((void*)clarityfont, sizeof(clarityfont), 18.0f, &m_config, ranges);
		c_menu::get().subtab_title = io.Fonts->AddFontFromMemoryTTF((void*)PTRootUIBold, sizeof(PTRootUIBold), 15.0f, &m_config, ranges);
		c_menu::get().combo_arrow = io.Fonts->AddFontFromMemoryTTF((void*)combo, sizeof(combo), 9.0f, &m_config, ranges);


		c_menu::get().futura_small = io.Fonts->AddFontFromMemoryTTF((void*)futuramediumc, sizeof(futuramediumc), 15.f, &m_config, ranges);
		c_menu::get().futura = io.Fonts->AddFontFromMemoryTTF((void*)futuramediumc, sizeof(futuramediumc), 17.f, &m_config, ranges);
		c_menu::get().futura_large = io.Fonts->AddFontFromMemoryTTF((void*)futuramediumc, sizeof(futuramediumc), 20.f, &m_config, ranges);
		c_menu::get().icons = ImGui::GetIO().Fonts->AddFontFromMemoryCompressedTTF(MyFont_compressed_data1, MyFont_compressed_size1, 22.f, &m_config, ImGui::GetIO().Fonts->GetGlyphRangesCyrillic());
		c_menu::get().astrium = io.Fonts->AddFontFromMemoryTTF((void*)astr, sizeof(astr), 25.f, &m_config, io.Fonts->GetGlyphRangesCyrillic());
		c_menu::get().weapon_icons = io.Fonts->AddFontFromMemoryTTF((void*)weapons_font, sizeof(weapons_font), 18, &m_config, io.Fonts->GetGlyphRangesDefault());
		c_menu::get().weapon_icons2 = io.Fonts->AddFontFromMemoryTTF((void*)weapons_font, sizeof(weapons_font), 20, &m_config, io.Fonts->GetGlyphRangesDefault());
		c_menu::get().font = io.Fonts->AddFontFromMemoryTTF((void*)font, sizeof(font), 13.0f, NULL, io.Fonts->GetGlyphRangesCyrillic());
		c_menu::get().interfaces = io.Fonts->AddFontFromMemoryTTF((void*)interfaces, sizeof(interfaces), 15.f * 1.25, &m_config, ranges);
		c_menu::get().timersz = io.Fonts->AddFontFromMemoryTTF((void*)timers, sizeof(timers), 20, &m_config, ranges);
		c_menu::get().isis = io.Fonts->AddFontFromMemoryTTF((void*)font, sizeof(font), 21.0f, NULL, io.Fonts->GetGlyphRangesJapanese());
		c_menu::get().smallest_pixel = io.Fonts->AddFontFromMemoryTTF((void*)font, sizeof(font), 12.0f, NULL, io.Fonts->GetGlyphRangesJapanese());

		c_menu::get().bigxd = ImGui::GetIO().Fonts->AddFontFromMemoryCompressedTTF(
			Droid_compressed_data,
			Droid_compressed_size,
			15.f, &m_config, ImGui::GetIO().Fonts->GetGlyphRangesCyrillic());

		c_menu::get().gotham = io.Fonts->AddFontFromMemoryTTF((void*)GothamPro, sizeof(GothamPro), 13.f, &m_config, ranges);

		// Icon fonts
		c_menu::get().ico_menu = io.Fonts->AddFontFromMemoryTTF((void*)icomenu, sizeof(icomenu), 20.f, &m_config, io.Fonts->GetGlyphRangesCyrillic());
		c_menu::get().ico_bottom = io.Fonts->AddFontFromMemoryTTF((void*)iconbot, sizeof(iconbot), 20.f, &m_config, io.Fonts->GetGlyphRangesCyrillic());

		ImGui_ImplDX9_CreateDeviceObjects();
		d3d_init = true;
	}

	long __stdcall hooked_present(IDirect3DDevice9* device, RECT* src_rect, RECT* dest_rect, HWND dest_wnd_override, RGNDATA* dirty_region)
	{
		static auto original = directx_hook->get_func_address <PresentFn> (17);
		g_ctx.local((player_t*)m_entitylist()->GetClientEntity(m_engine()->GetLocalPlayer()), true);

		if (!d3d_init)
			GUI_Init(device);

		IDirect3DVertexDeclaration9* vertex_dec;
		device->GetVertexDeclaration(&vertex_dec);

		IDirect3DVertexShader9* vertex_shader;
		device->GetVertexShader(&vertex_shader);

		c_menu::get().device = device;

		ImGui_ImplDX9_NewFrame();
		ImGui_ImplWin32_NewFrame();
		ImGui::NewFrame();

		if (GetAsyncKeyState(VK_DELETE))
		{
			//c_menu::get().draw(menu_open);
		}

		c_menu::get().render2(menu_open);

		otheresp::get().spread_crosshair(device);

		if (g_ctx.globals.should_update_radar)
			Radar::get().OnMapLoad(m_engine()->GetLevelNameShort(), device);
		else
			Radar::get().Render();

		ImGui::EndFrame();
		ImGui::Render();

		ImGui_ImplDX9_RenderDrawData(ImGui::GetDrawData());

		device->SetVertexShader(vertex_shader);
		device->SetVertexDeclaration(vertex_dec);

		return original(device, src_rect, dest_rect, dest_wnd_override, dirty_region);
	}

	long __stdcall Hooked_EndScene_Reset(IDirect3DDevice9* pDevice, D3DPRESENT_PARAMETERS* pPresentationParameters)
	{
		static auto ofunc = directx_hook->get_func_address<EndSceneResetFn>(16);

		if (!d3d_init)
			return ofunc(pDevice, pPresentationParameters);

		ImGui_ImplDX9_InvalidateDeviceObjects();

		auto hr = ofunc(pDevice, pPresentationParameters);

		if (SUCCEEDED(hr))
			ImGui_ImplDX9_CreateDeviceObjects();

		return hr;
	}

	DWORD original_getforeignfallbackfontname;
	DWORD original_setupbones;
	DWORD original_doextrabonesprocessing;
	DWORD original_standardblendingrules;
	DWORD original_updateclientsideanimation;
	DWORD original_physicssimulate;
	DWORD original_modifyeyeposition;
	DWORD original_calcviewmodelbob;
	DWORD original_processinterpolatedlist;
	DWORD original_clmove;

	vmthook* directx_hook;
	vmthook* client_hook;
	vmthook* clientstate_hook;
	vmthook* engine_hook;
	vmthook* clientmode_hook;
	vmthook* inputinternal_hook;
	vmthook* renderview_hook;
	vmthook* panel_hook;
	vmthook* modelcache_hook;
	vmthook* materialsys_hook;
	vmthook* modelrender_hook;
	vmthook* surface_hook;
	vmthook* bspquery_hook;
	vmthook* prediction_hook;
	vmthook* trace_hook;
	vmthook* filesystem_hook;

	C_HookedEvents hooked_events;
}

void __fastcall hooks::hooked_setkeycodestate(void* thisptr, void* edx, ButtonCode_t code, bool bDown)
{
	static auto original_fn = inputinternal_hook->get_func_address <SetKeyCodeState_t> (91);

	if (input_shouldListen && bDown)
	{
		input_shouldListen = false;

		if (input_receivedKeyval)
			*input_receivedKeyval = code;
	}

	return original_fn(thisptr, code, bDown);
}

void __fastcall hooks::hooked_setmousecodestate(void* thisptr, void* edx, ButtonCode_t code, MouseCodeState_t state)
{
	static auto original_fn = inputinternal_hook->get_func_address <SetMouseCodeState_t> (92);

	if (input_shouldListen && state == BUTTON_PRESSED)
	{
		input_shouldListen = false;

		if (input_receivedKeyval)
			*input_receivedKeyval = code;
	}

	return original_fn(thisptr, code, state);
}